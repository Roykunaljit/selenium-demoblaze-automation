{"uid":"115cb79b53361fb","name":"test_page_factory_login_flow","fullName":"selenium_demoblaze_framework.tests.test_page_factory.TestPageFactory#test_page_factory_login_flow","historyId":"d6495a379c86574ccc375d118e82ddc0","time":{"start":1760969126778,"stop":1760969135726,"duration":8948},"description":"Test complete login flow using Page Factory","descriptionHtml":"<p>Test complete login flow using Page Factory</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (300, 86). Other element would receive the click: <div class=\"modal-header\">...</div>\n  (Session info: chrome=141.0.7390.107)\nStacktrace:\n#0 0x5629b23bf67a <unknown>\n#1 0x5629b1e3e566 <unknown>\n#2 0x5629b1e975cc <unknown>\n#3 0x5629b1e9544d <unknown>\n#4 0x5629b1e92ab2 <unknown>\n#5 0x5629b1e921c0 <unknown>\n#6 0x5629b1e8498b <unknown>\n#7 0x5629b1eb6632 <unknown>\n#8 0x5629b1e84307 <unknown>\n#9 0x5629b1eb67fe <unknown>\n#10 0x5629b1edc328 <unknown>\n#11 0x5629b1eb6403 <unknown>\n#12 0x5629b1e82b02 <unknown>\n#13 0x5629b1e837c1 <unknown>\n#14 0x5629b2383448 <unknown>\n#15 0x5629b23872af <unknown>\n#16 0x5629b236a8d9 <unknown>\n#17 0x5629b2387e55 <unknown>\n#18 0x5629b235013f <unknown>\n#19 0x5629b23ac4b8 <unknown>\n#20 0x5629b23ac693 <unknown>\n#21 0x5629b23be613 <unknown>\n#22 0x7f46d109caa4 <unknown>\n#23 0x7f46d1129c6c <unknown>","statusTrace":"self = <tests.test_page_factory.TestPageFactory object at 0x7ff3dfaaa0a0>\nsetup = None\n\n    def test_page_factory_login_flow(self, setup):\n        \"\"\"Test complete login flow using Page Factory\"\"\"\n        try:\n            # Open signup modal\n            self.home_page.open_signup_modal()\n    \n            # Signup with random user\n            import random\n            import string\n            random_username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))\n            password = \"Test@1234\"\n    \n            self.home_page.signup(random_username, password)\n    \n            # Handle signup alert\n            time.sleep(2)  # Wait for alert\n            try:\n                alert = self.driver.switch_to.alert\n                alert_text = alert.text\n                alert.accept()\n                self.logger.info(f\"Signup alert: {alert_text}\")\n            except:\n                pass\n    \n            time.sleep(3)  # Wait for modal to close\n    \n            # Open login modal\n>           self.home_page.open_login_modal()\n\nselenium_demoblaze_framework/tests/test_page_factory.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nselenium_demoblaze_framework/pages/home_page_factory.py:143: in open_login_modal\n    login_btn.click()\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff3df619310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5629b23be613 \\\\u003Cunknown>\\\\n#22 0x7f46d109caa4 \\\\u003Cunknown>\\\\n#23 0x7f46d1129c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (300, 86). Other element would receive the click: <div class=\"modal-header\">...</div>\nE         (Session info: chrome=141.0.7390.107)\nE       Stacktrace:\nE       #0 0x5629b23bf67a <unknown>\nE       #1 0x5629b1e3e566 <unknown>\nE       #2 0x5629b1e975cc <unknown>\nE       #3 0x5629b1e9544d <unknown>\nE       #4 0x5629b1e92ab2 <unknown>\nE       #5 0x5629b1e921c0 <unknown>\nE       #6 0x5629b1e8498b <unknown>\nE       #7 0x5629b1eb6632 <unknown>\nE       #8 0x5629b1e84307 <unknown>\nE       #9 0x5629b1eb67fe <unknown>\nE       #10 0x5629b1edc328 <unknown>\nE       #11 0x5629b1eb6403 <unknown>\nE       #12 0x5629b1e82b02 <unknown>\nE       #13 0x5629b1e837c1 <unknown>\nE       #14 0x5629b2383448 <unknown>\nE       #15 0x5629b23872af <unknown>\nE       #16 0x5629b236a8d9 <unknown>\nE       #17 0x5629b2387e55 <unknown>\nE       #18 0x5629b235013f <unknown>\nE       #19 0x5629b23ac4b8 <unknown>\nE       #20 0x5629b23ac693 <unknown>\nE       #21 0x5629b23be613 <unknown>\nE       #22 0x7f46d109caa4 <unknown>\nE       #23 0x7f46d1129c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760968693439,"stop":1760968693505,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1760969122687,"stop":1760969126776,"duration":4089},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Test complete login flow using Page Factory","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (300, 86). Other element would receive the click: <div class=\"modal-header\">...</div>\n  (Session info: chrome=141.0.7390.107)\nStacktrace:\n#0 0x5629b23bf67a <unknown>\n#1 0x5629b1e3e566 <unknown>\n#2 0x5629b1e975cc <unknown>\n#3 0x5629b1e9544d <unknown>\n#4 0x5629b1e92ab2 <unknown>\n#5 0x5629b1e921c0 <unknown>\n#6 0x5629b1e8498b <unknown>\n#7 0x5629b1eb6632 <unknown>\n#8 0x5629b1e84307 <unknown>\n#9 0x5629b1eb67fe <unknown>\n#10 0x5629b1edc328 <unknown>\n#11 0x5629b1eb6403 <unknown>\n#12 0x5629b1e82b02 <unknown>\n#13 0x5629b1e837c1 <unknown>\n#14 0x5629b2383448 <unknown>\n#15 0x5629b23872af <unknown>\n#16 0x5629b236a8d9 <unknown>\n#17 0x5629b2387e55 <unknown>\n#18 0x5629b235013f <unknown>\n#19 0x5629b23ac4b8 <unknown>\n#20 0x5629b23ac693 <unknown>\n#21 0x5629b23be613 <unknown>\n#22 0x7f46d109caa4 <unknown>\n#23 0x7f46d1129c6c <unknown>","statusTrace":"self = <tests.test_page_factory.TestPageFactory object at 0x7ff3dfaaa0a0>\nsetup = None\n\n    def test_page_factory_login_flow(self, setup):\n        \"\"\"Test complete login flow using Page Factory\"\"\"\n        try:\n            # Open signup modal\n            self.home_page.open_signup_modal()\n    \n            # Signup with random user\n            import random\n            import string\n            random_username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))\n            password = \"Test@1234\"\n    \n            self.home_page.signup(random_username, password)\n    \n            # Handle signup alert\n            time.sleep(2)  # Wait for alert\n            try:\n                alert = self.driver.switch_to.alert\n                alert_text = alert.text\n                alert.accept()\n                self.logger.info(f\"Signup alert: {alert_text}\")\n            except:\n                pass\n    \n            time.sleep(3)  # Wait for modal to close\n    \n            # Open login modal\n>           self.home_page.open_login_modal()\n\nselenium_demoblaze_framework/tests/test_page_factory.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nselenium_demoblaze_framework/pages/home_page_factory.py:143: in open_login_modal\n    login_btn.click()\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff3df619310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5629b23be613 \\\\u003Cunknown>\\\\n#22 0x7f46d109caa4 \\\\u003Cunknown>\\\\n#23 0x7f46d1129c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (300, 86). Other element would receive the click: <div class=\"modal-header\">...</div>\nE         (Session info: chrome=141.0.7390.107)\nE       Stacktrace:\nE       #0 0x5629b23bf67a <unknown>\nE       #1 0x5629b1e3e566 <unknown>\nE       #2 0x5629b1e975cc <unknown>\nE       #3 0x5629b1e9544d <unknown>\nE       #4 0x5629b1e92ab2 <unknown>\nE       #5 0x5629b1e921c0 <unknown>\nE       #6 0x5629b1e8498b <unknown>\nE       #7 0x5629b1eb6632 <unknown>\nE       #8 0x5629b1e84307 <unknown>\nE       #9 0x5629b1eb67fe <unknown>\nE       #10 0x5629b1edc328 <unknown>\nE       #11 0x5629b1eb6403 <unknown>\nE       #12 0x5629b1e82b02 <unknown>\nE       #13 0x5629b1e837c1 <unknown>\nE       #14 0x5629b2383448 <unknown>\nE       #15 0x5629b23872af <unknown>\nE       #16 0x5629b236a8d9 <unknown>\nE       #17 0x5629b2387e55 <unknown>\nE       #18 0x5629b235013f <unknown>\nE       #19 0x5629b23ac4b8 <unknown>\nE       #20 0x5629b23ac693 <unknown>\nE       #21 0x5629b23be613 <unknown>\nE       #22 0x7f46d109caa4 <unknown>\nE       #23 0x7f46d1129c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"fd14d8959fa51382","name":"log","source":"fd14d8959fa51382.txt","type":"text/plain","size":1093},{"uid":"126eab20aca99a99","name":"stderr","source":"126eab20aca99a99.txt","type":"text/plain","size":1124}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1760969135756,"stop":1760969135821,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"selenium_demoblaze_framework.tests"},{"name":"suite","value":"test_page_factory"},{"name":"subSuite","value":"TestPageFactory"},{"name":"host","value":"runnervmzdgdc"},{"name":"thread","value":"2849-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"selenium_demoblaze_framework.tests.test_page_factory"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"1ac7789beabe246e","reportUrl":"https://Roykunaljit.github.io/selenium-demoblaze-automation/14//#testresult/1ac7789beabe246e","status":"passed","time":{"start":1760968053962,"stop":1760968071914,"duration":17952}},{"uid":"b8c308811562135e","reportUrl":"https://Roykunaljit.github.io/selenium-demoblaze-automation/13//#testresult/b8c308811562135e","status":"passed","time":{"start":1760782541027,"stop":1760782558920,"duration":17893}},{"uid":"e4e8173d76952368","reportUrl":"https://Roykunaljit.github.io/selenium-demoblaze-automation/12//#testresult/e4e8173d76952368","status":"passed","time":{"start":1760781539625,"stop":1760781557512,"duration":17887}}]},"tags":[]},"source":"115cb79b53361fb.json","parameterValues":[]}