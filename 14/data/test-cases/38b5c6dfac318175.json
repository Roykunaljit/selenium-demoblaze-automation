{"uid":"38b5c6dfac318175","name":"test_33_radio_button_demo","fullName":"selenium_demoblaze_framework.tests.test_demoblaze_e2e.TestDemoBlazeE2E#test_33_radio_button_demo","historyId":"a70c13efcdd546b2716671f9420c9b41","time":{"start":1760968936375,"stop":1760968996387,"duration":60012},"description":"Demonstrate radio button interaction on a compatible site.","descriptionHtml":"<p>Demonstrate radio button interaction on a compatible site.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 59.620\n  (Session info: chrome=141.0.7390.107)\nStacktrace:\n#0 0x55d0dc95267a <unknown>\n#1 0x55d0dc3d1566 <unknown>\n#2 0x55d0dc3b961f <unknown>\n#3 0x55d0dc3b9302 <unknown>\n#4 0x55d0dc3b7142 <unknown>\n#5 0x55d0dc3b7a9f <unknown>\n#6 0x55d0dc3c6373 <unknown>\n#7 0x55d0dc3dfa7b <unknown>\n#8 0x55d0dc3e620b <unknown>\n#9 0x55d0dc3b81dd <unknown>\n#10 0x55d0dc3df7a8 <unknown>\n#11 0x55d0dc46f685 <unknown>\n#12 0x55d0dc449403 <unknown>\n#13 0x55d0dc415b02 <unknown>\n#14 0x55d0dc4167c1 <unknown>\n#15 0x55d0dc916448 <unknown>\n#16 0x55d0dc91a2af <unknown>\n#17 0x55d0dc8fd8d9 <unknown>\n#18 0x55d0dc91ae55 <unknown>\n#19 0x55d0dc8e313f <unknown>\n#20 0x55d0dc93f4b8 <unknown>\n#21 0x55d0dc93f693 <unknown>\n#22 0x55d0dc951613 <unknown>\n#23 0x7f1e1469caa4 <unknown>\n#24 0x7f1e14729c6c <unknown>","statusTrace":"self = <tests.test_demoblaze_e2e.TestDemoBlazeE2E object at 0x7ff3ce2982b0>\n\n    @allure.feature('Form Elements')\n    @allure.story('Test Radio Button Handling (on external demo site)')\n    def test_33_radio_button_demo(self):\n        \"\"\"Demonstrate radio button interaction on a compatible site.\"\"\"\n        self.logger.info(\"Testing radio button selection on demoqa.com\")\n    \n        # Navigate to a site that actually has radio buttons\n>       self.driver.get(\"https://demoqa.com/radio-button\")\n\nselenium_demoblaze_framework/tests/test_demoblaze_e2e.py:879: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:355: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff3df83ebb0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 5...\\\\n#22 0x55d0dc951613 \\\\u003Cunknown>\\\\n#23 0x7f1e1469caa4 \\\\u003Cunknown>\\\\n#24 0x7f1e14729c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 59.620\nE         (Session info: chrome=141.0.7390.107)\nE       Stacktrace:\nE       #0 0x55d0dc95267a <unknown>\nE       #1 0x55d0dc3d1566 <unknown>\nE       #2 0x55d0dc3b961f <unknown>\nE       #3 0x55d0dc3b9302 <unknown>\nE       #4 0x55d0dc3b7142 <unknown>\nE       #5 0x55d0dc3b7a9f <unknown>\nE       #6 0x55d0dc3c6373 <unknown>\nE       #7 0x55d0dc3dfa7b <unknown>\nE       #8 0x55d0dc3e620b <unknown>\nE       #9 0x55d0dc3b81dd <unknown>\nE       #10 0x55d0dc3df7a8 <unknown>\nE       #11 0x55d0dc46f685 <unknown>\nE       #12 0x55d0dc449403 <unknown>\nE       #13 0x55d0dc415b02 <unknown>\nE       #14 0x55d0dc4167c1 <unknown>\nE       #15 0x55d0dc916448 <unknown>\nE       #16 0x55d0dc91a2af <unknown>\nE       #17 0x55d0dc8fd8d9 <unknown>\nE       #18 0x55d0dc91ae55 <unknown>\nE       #19 0x55d0dc8e313f <unknown>\nE       #20 0x55d0dc93f4b8 <unknown>\nE       #21 0x55d0dc93f693 <unknown>\nE       #22 0x55d0dc951613 <unknown>\nE       #23 0x7f1e1469caa4 <unknown>\nE       #24 0x7f1e14729c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760968693439,"stop":1760968693505,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_and_teardown","time":{"start":1760968935335,"stop":1760968936374,"duration":1039},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Demonstrate radio button interaction on a compatible site.","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 59.620\n  (Session info: chrome=141.0.7390.107)\nStacktrace:\n#0 0x55d0dc95267a <unknown>\n#1 0x55d0dc3d1566 <unknown>\n#2 0x55d0dc3b961f <unknown>\n#3 0x55d0dc3b9302 <unknown>\n#4 0x55d0dc3b7142 <unknown>\n#5 0x55d0dc3b7a9f <unknown>\n#6 0x55d0dc3c6373 <unknown>\n#7 0x55d0dc3dfa7b <unknown>\n#8 0x55d0dc3e620b <unknown>\n#9 0x55d0dc3b81dd <unknown>\n#10 0x55d0dc3df7a8 <unknown>\n#11 0x55d0dc46f685 <unknown>\n#12 0x55d0dc449403 <unknown>\n#13 0x55d0dc415b02 <unknown>\n#14 0x55d0dc4167c1 <unknown>\n#15 0x55d0dc916448 <unknown>\n#16 0x55d0dc91a2af <unknown>\n#17 0x55d0dc8fd8d9 <unknown>\n#18 0x55d0dc91ae55 <unknown>\n#19 0x55d0dc8e313f <unknown>\n#20 0x55d0dc93f4b8 <unknown>\n#21 0x55d0dc93f693 <unknown>\n#22 0x55d0dc951613 <unknown>\n#23 0x7f1e1469caa4 <unknown>\n#24 0x7f1e14729c6c <unknown>","statusTrace":"self = <tests.test_demoblaze_e2e.TestDemoBlazeE2E object at 0x7ff3ce2982b0>\n\n    @allure.feature('Form Elements')\n    @allure.story('Test Radio Button Handling (on external demo site)')\n    def test_33_radio_button_demo(self):\n        \"\"\"Demonstrate radio button interaction on a compatible site.\"\"\"\n        self.logger.info(\"Testing radio button selection on demoqa.com\")\n    \n        # Navigate to a site that actually has radio buttons\n>       self.driver.get(\"https://demoqa.com/radio-button\")\n\nselenium_demoblaze_framework/tests/test_demoblaze_e2e.py:879: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:355: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff3df83ebb0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 5...\\\\n#22 0x55d0dc951613 \\\\u003Cunknown>\\\\n#23 0x7f1e1469caa4 \\\\u003Cunknown>\\\\n#24 0x7f1e14729c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 59.620\nE         (Session info: chrome=141.0.7390.107)\nE       Stacktrace:\nE       #0 0x55d0dc95267a <unknown>\nE       #1 0x55d0dc3d1566 <unknown>\nE       #2 0x55d0dc3b961f <unknown>\nE       #3 0x55d0dc3b9302 <unknown>\nE       #4 0x55d0dc3b7142 <unknown>\nE       #5 0x55d0dc3b7a9f <unknown>\nE       #6 0x55d0dc3c6373 <unknown>\nE       #7 0x55d0dc3dfa7b <unknown>\nE       #8 0x55d0dc3e620b <unknown>\nE       #9 0x55d0dc3b81dd <unknown>\nE       #10 0x55d0dc3df7a8 <unknown>\nE       #11 0x55d0dc46f685 <unknown>\nE       #12 0x55d0dc449403 <unknown>\nE       #13 0x55d0dc415b02 <unknown>\nE       #14 0x55d0dc4167c1 <unknown>\nE       #15 0x55d0dc916448 <unknown>\nE       #16 0x55d0dc91a2af <unknown>\nE       #17 0x55d0dc8fd8d9 <unknown>\nE       #18 0x55d0dc91ae55 <unknown>\nE       #19 0x55d0dc8e313f <unknown>\nE       #20 0x55d0dc93f4b8 <unknown>\nE       #21 0x55d0dc93f693 <unknown>\nE       #22 0x55d0dc951613 <unknown>\nE       #23 0x7f1e1469caa4 <unknown>\nE       #24 0x7f1e14729c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.24/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[],"attachments":[{"uid":"ed03a0d1222caa30","name":"log","source":"ed03a0d1222caa30.txt","type":"text/plain","size":517},{"uid":"2511f895f4b7e9f6","name":"stderr","source":"2511f895f4b7e9f6.txt","type":"text/plain","size":632}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_and_teardown::0","time":{"start":1760968996422,"stop":1760968996500,"duration":78},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Form Elements"},{"name":"story","value":"Test Radio Button Handling (on external demo site)"},{"name":"parentSuite","value":"selenium_demoblaze_framework.tests"},{"name":"suite","value":"test_demoblaze_e2e"},{"name":"subSuite","value":"TestDemoBlazeE2E"},{"name":"host","value":"runnervmzdgdc"},{"name":"thread","value":"2849-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"selenium_demoblaze_framework.tests.test_demoblaze_e2e"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"7025e5e9ae044ec4","reportUrl":"https://Roykunaljit.github.io/selenium-demoblaze-automation/14//#testresult/7025e5e9ae044ec4","status":"passed","time":{"start":1760967927152,"stop":1760967932229,"duration":5077}},{"uid":"f656bccaa6741937","reportUrl":"https://Roykunaljit.github.io/selenium-demoblaze-automation/13//#testresult/f656bccaa6741937","status":"passed","time":{"start":1760782456015,"stop":1760782460522,"duration":4507}},{"uid":"153a92d14dc5b3dd","reportUrl":"https://Roykunaljit.github.io/selenium-demoblaze-automation/12//#testresult/153a92d14dc5b3dd","status":"passed","time":{"start":1760781452652,"stop":1760781456847,"duration":4195}}]},"tags":[]},"source":"38b5c6dfac318175.json","parameterValues":[]}