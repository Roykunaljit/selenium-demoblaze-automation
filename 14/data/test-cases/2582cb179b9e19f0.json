{"uid":"2582cb179b9e19f0","name":"test_32_broken_links_check","fullName":"selenium_demoblaze_framework.tests.test_demoblaze_e2e.TestDemoBlazeE2E#test_32_broken_links_check","historyId":"ea92dfbb80af63873a5122ca2b3efc57","time":{"start":1760967909642,"stop":1760967926029,"duration":16387},"description":"Test broken link validation on The Internet homepage.","descriptionHtml":"<p>Test broken link validation on The Internet homepage.</p>\n","status":"failed","statusMessage":"AssertionError: Expected more than 5 valid links, but found only 0\nassert 0 > 5","statusTrace":"self = <tests.test_demoblaze_e2e.TestDemoBlazeE2E object at 0x7f31266980a0>\n\n    @allure.feature('Broken Links')\n    @allure.story('Test Broken Link Validation')\n    def test_32_broken_links_check(self):\n        \"\"\"Test broken link validation on The Internet homepage.\"\"\"\n        self.logger.info(\"Running broken links check on The Internet homepage\")\n    \n        # Navigate to a page with known valid absolute external links\n        self.driver.get(\"https://the-internet.herokuapp.com/\")\n        time.sleep(2)  # Optional: wait for page to load (consider replacing with WebDriverWait)\n    \n        # Check for broken links using utility method\n        result = self.utils.check_broken_links()\n    \n        valid_links = result[\"valid_links\"]\n        broken_links = result[\"broken_links\"]\n        broken_list = result[\"broken_list\"]\n    \n        # Log results\n        self.logger.info(f\"✅ Found {valid_links} valid links\")\n        if broken_links > 0:\n            self.logger.warning(f\"⚠️ Found {broken_links} broken links: {broken_list}\")\n    \n        # Assert that we have a reasonable number of working links\n>       assert valid_links > 5, f\"Expected more than 5 valid links, but found only {valid_links}\"\nE       AssertionError: Expected more than 5 valid links, but found only 0\nE       assert 0 > 5\n\nselenium_demoblaze_framework/tests/test_demoblaze_e2e.py:868: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760967676741,"stop":1760967676810,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_and_teardown","time":{"start":1760967908610,"stop":1760967909641,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Test broken link validation on The Internet homepage.","status":"failed","statusMessage":"AssertionError: Expected more than 5 valid links, but found only 0\nassert 0 > 5","statusTrace":"self = <tests.test_demoblaze_e2e.TestDemoBlazeE2E object at 0x7f31266980a0>\n\n    @allure.feature('Broken Links')\n    @allure.story('Test Broken Link Validation')\n    def test_32_broken_links_check(self):\n        \"\"\"Test broken link validation on The Internet homepage.\"\"\"\n        self.logger.info(\"Running broken links check on The Internet homepage\")\n    \n        # Navigate to a page with known valid absolute external links\n        self.driver.get(\"https://the-internet.herokuapp.com/\")\n        time.sleep(2)  # Optional: wait for page to load (consider replacing with WebDriverWait)\n    \n        # Check for broken links using utility method\n        result = self.utils.check_broken_links()\n    \n        valid_links = result[\"valid_links\"]\n        broken_links = result[\"broken_links\"]\n        broken_list = result[\"broken_list\"]\n    \n        # Log results\n        self.logger.info(f\"✅ Found {valid_links} valid links\")\n        if broken_links > 0:\n            self.logger.warning(f\"⚠️ Found {broken_links} broken links: {broken_list}\")\n    \n        # Assert that we have a reasonable number of working links\n>       assert valid_links > 5, f\"Expected more than 5 valid links, but found only {valid_links}\"\nE       AssertionError: Expected more than 5 valid links, but found only 0\nE       assert 0 > 5\n\nselenium_demoblaze_framework/tests/test_demoblaze_e2e.py:868: AssertionError","steps":[],"attachments":[{"uid":"a37a6b239193a584","name":"log","source":"a37a6b239193a584.txt","type":"text/plain","size":846},{"uid":"82a06d1c74e0e654","name":"stderr","source":"82a06d1c74e0e654.txt","type":"text/plain","size":1047}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_and_teardown::0","time":{"start":1760967926044,"stop":1760967926109,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Broken Links"},{"name":"story","value":"Test Broken Link Validation"},{"name":"parentSuite","value":"selenium_demoblaze_framework.tests"},{"name":"suite","value":"test_demoblaze_e2e"},{"name":"subSuite","value":"TestDemoBlazeE2E"},{"name":"host","value":"runnervmzdgdc"},{"name":"thread","value":"2817-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"selenium_demoblaze_framework.tests.test_demoblaze_e2e"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"ac7662b98883164b","reportUrl":"https://Roykunaljit.github.io/selenium-demoblaze-automation/13//#testresult/ac7662b98883164b","status":"passed","time":{"start":1760782448932,"stop":1760782454997,"duration":6065}},{"uid":"bf48441de10b655c","reportUrl":"https://Roykunaljit.github.io/selenium-demoblaze-automation/12//#testresult/bf48441de10b655c","status":"passed","time":{"start":1760781442553,"stop":1760781451684,"duration":9131}}]},"tags":[]},"source":"2582cb179b9e19f0.json","parameterValues":[]}